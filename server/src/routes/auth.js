const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const otpStore = {}; // D√πng t·∫°m trong RAM, n·∫øu c·∫ßn b·ªÅn v·ªØng th√¨ d√πng DB

const Otp = require('../models/Otp');
const sendEmail = require('../utils/sendEmail');
const crypto = require('crypto');

// C·∫•u h√¨nh multer l∆∞u ·∫£nh
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Th∆∞ m·ª•c l∆∞u ·∫£nh
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + path.extname(file.originalname)); // t√™n file duy nh·∫•t
  }
});

const upload = multer({ storage: storage });

// Route ƒëƒÉng k√Ω c√≥ upload ·∫£nh
router.post('/register', upload.single('image'), async (req, res) => {
  try {
    console.log('üì• Body nh·∫≠n ƒë∆∞·ª£c:', req.body);
    console.log('üì• File nh·∫≠n ƒë∆∞·ª£c:', req.file);

    const { name, email, password, confirmPassword, phone } = req.body;
    const imageUrl = req.file ? `/uploads/${req.file.filename}` : null;

    if (!name || !email || !password || !confirmPassword || !phone || !imageUrl) {
      return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin v√† upload ·∫£nh' });
    }

    if (password !== confirmPassword) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u v√† x√°c nh·∫≠n kh√¥ng kh·ªõp' });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
    }

    // ƒê·∫øm ng∆∞·ªùi d√πng ƒë·ªÉ ph√¢n quy·ªÅn
    const userCount = await User.countDocuments();
    const assignedRole = userCount === 0 ? 'admin' : 'user';

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // T·∫°o user m·ªõi
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      imageUrl,
      phone,
      role: assignedRole
    });

    await newUser.save();

    res.status(201).json({
      message: `ƒêƒÉng k√Ω th√†nh c√¥ng v·ªõi vai tr√≤ ${assignedRole}`,
      role: assignedRole
    });
  } catch (err) {
    console.error('‚ùå L·ªói trong POST /register:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});



// üìå ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // ‚úÖ Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!email || !password) {
      return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u' });
    }

    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' });

    // ‚úÖ T·∫°o JWT token
    const token = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET || 'secret_key',
      { expiresIn: '1h' }
    );

    // ‚úÖ ·∫®n m·∫≠t kh·∫©u khi tr·∫£ v·ªÅ
    const { password: _, ...userWithoutPassword } = user.toObject();

    res.json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      token,
      user: userWithoutPassword
    });
  } catch (err) {
    console.error('‚ùå L·ªói login:', err);
    res.status(500).json({ message: 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i.' });
  }
}); 

// ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (name, email, phone, ·∫£nh)
router.put('/:id', upload.single('image'), async (req, res) => {
  try {
    const userId = req.params.id;
    const { name, email, phone, currentPassword, newPassword } = req.body;
    const imageUrl = req.file ? `/uploads/${req.file.filename}` : null;

    // T√¨m user hi·ªán t·∫°i
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng th∆∞·ªùng
    if (name) user.name = name;
    if (email) user.email = email;
    if (phone) user.phone = phone;
    if (imageUrl) user.imageUrl = imageUrl;

    // üîê N·∫øu c√≥ y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u
    if (currentPassword && newPassword) {
      const isMatch = await bcrypt.compare(currentPassword, user.password);
      if (!isMatch) {
        return res.status(400).json({ message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng' });
      }

      const hashedNewPassword = await bcrypt.hash(newPassword, 10);
      user.password = hashedNewPassword;
    }

    const updatedUser = await user.save();

    // ·∫®n m·∫≠t kh·∫©u
    const { password: _, ...userWithoutPassword } = updatedUser.toObject();

    res.json({
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
      user: userWithoutPassword,
    });
  } catch (err) {
    console.error('‚ùå L·ªói PUT /auth/:id:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

router.post('/send-otp', async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });

    if (!user) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: ${email}`);
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const expiresAt = Date.now() + 10 * 60 * 1000; // 10 ph√∫t

    // Log chi ti·∫øt tr∆∞·ªõc khi l∆∞u
    console.log(`üìß G·ª≠i OTP cho user: ${email}`);
    console.log(`üîë M√£ OTP t·∫°o ra: ${otp}`);
    console.log(`‚è≥ OTP h·∫øt h·∫°n l√∫c: ${new Date(expiresAt).toISOString()}`);

    // G√°n v√† l∆∞u v√†o DB
    user.otp = otp;
    user.otpExpires = new Date(expiresAt);
    await user.save();

    console.log(`‚úÖ ƒê√£ l∆∞u OTP v√†o DB cho email ${email}`);
    console.log(`üì¶ OTP l∆∞u trong DB: ${user.otp}`);
    console.log(`‚è∞ H·∫øt h·∫°n OTP (DB): ${user.otpExpires}`);

    await sendEmail(email, otp);

    res.json({ message: 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i' });
  } catch (err) {
    console.error(`üí• L·ªói khi g·ª≠i OTP:`, err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});




// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u sau khi x√°c minh OTP
router.post('/reset-password', async (req, res) => {
  const { email, otp, newPassword } = req.body;
  console.log('üì• Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', { email, otp, newPassword });

  try {
    const otpRecord = await Otp.findOne({ email, code: otp });
    console.log('üîç OTP t√¨m ƒë∆∞·ª£c trong DB:', otpRecord);

    if (!otpRecord) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y m√£ OTP t∆∞∆°ng ·ª©ng trong DB');
      return res.status(400).json({ message: 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }

    if (otpRecord.expiresAt < new Date()) {
      console.log(`‚è∞ OTP ƒë√£ h·∫øt h·∫°n l√∫c ${otpRecord.expiresAt}, hi·ªán t·∫°i l√† ${new Date()}`);
      return res.status(400).json({ message: 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }

    const user = await User.findOne({ email });
    if (!user) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email:', email);
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }

    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();
    console.log('‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng cho email:', email);

    await Otp.deleteMany({ email });
    console.log('üßπ ƒê√£ xo√° t·∫•t c·∫£ OTP c·ªßa email:', email);

    res.json({ message: '‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', err);
    res.status(500).json({ message: 'L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u' });
  }
});


// POST /api/auth/verify-otp

router.post('/verify-otp', async (req, res) => {
  const { email, otp } = req.body;

  try {
    const otpRecord = await Otp.findOne({ email, code: otp });
    if (!otpRecord || otpRecord.expiresAt < new Date()) {
      return res.status(400).json({ message: 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }

    res.json({ message: '‚úÖ OTP h·ª£p l·ªá' }); // FE t·ª± l∆∞u OTP/email ƒë·ªÉ g·ª≠i ·ªü b∆∞·ªõc sau
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server khi x√°c minh OTP' });
  }
});




module.exports = router;

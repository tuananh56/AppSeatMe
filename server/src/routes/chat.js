const express = require('express');
const router = express.Router();
const Chat = require('../models/Chat');
const User = require('../models/User');

// üìå L∆∞u tin nh·∫Øn
router.post('/', async (req, res) => {
  try {
    const { senderId, receiverId, message } = req.body;

    console.log('üì• Nh·∫≠n request l∆∞u chat:', { senderId, receiverId, message });

    if (!senderId || !receiverId || !message) {
      console.warn('‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu khi l∆∞u chat');
      return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' });
    }

    const chat = new Chat({ senderId, receiverId, message });
    await chat.save();

    console.log('‚úÖ Tin nh·∫Øn ƒë√£ l∆∞u DB:', chat);

    res.status(201).json(chat);
  } catch (err) {
    console.error('‚ùå L·ªói l∆∞u chat v√†o DB:', err);
    res.status(500).json({ error: err.message });
  }
});

// üìå L·∫•y l·ªãch s·ª≠ chat gi·ªØa 2 user
router.get('/:userId/:otherId', async (req, res) => {
  try {
    const { userId, otherId } = req.params;
    console.log(`üì• Y√™u c·∫ßu l·∫•y l·ªãch s·ª≠ chat gi·ªØa: ${userId} ‚Üî ${otherId}`);

    if (!userId || !otherId) {
      console.warn('‚ö†Ô∏è Thi·∫øu userId ho·∫∑c otherId khi l·∫•y l·ªãch s·ª≠ chat');
      return res.status(400).json({ error: 'Thi·∫øu userId ho·∫∑c otherId' });
    }

    const messages = await Chat.find({
      $or: [
        { senderId: userId, receiverId: otherId },
        { senderId: otherId, receiverId: userId }
      ]
    }).sort({ createdAt: 1 });

    console.log(`üì§ Tr·∫£ v·ªÅ ${messages.length} tin nh·∫Øn gi·ªØa ${userId} v√† ${otherId}`);
    res.json(messages);
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y l·ªãch s·ª≠ chat t·ª´ DB:', err);
    res.status(500).json({ error: err.message });
  }
});

/*// üìå L·∫•y t·∫•t c·∫£ c√°c user ƒë√£ nh·∫Øn tin v·ªõi admin
router.get('/history', async (req, res) => {
  try {
    const adminId = '686bfd52d27d660c25c71c2c'; // ID c·ªë ƒë·ªãnh c·ªßa admin

    const chats = await Chat.find({
      $or: [{ senderId: adminId }, { receiverId: adminId }]
    }).sort({ createdAt: 1 });

    const grouped = {};

    chats.forEach(chat => {
      const otherId = chat.senderId === adminId ? chat.receiverId : chat.senderId;
      if (!grouped[otherId]) grouped[otherId] = [];
      grouped[otherId].push(chat);
    });

    res.json(grouped);
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y l·ªãch s·ª≠:', err);
    res.status(500).json({ error: err.message });
  }
});*/
// üìå L·∫•y t·∫•t c·∫£ c√°c user ƒë√£ nh·∫Øn tin v·ªõi admin, k√®m avatar + t√™n
router.get('/history', async (req, res) => {
  try {
    const adminId = '686bfd52d27d660c25c71c2c'; // ID c·ªë ƒë·ªãnh c·ªßa admin

    const chats = await Chat.find({
      $or: [{ senderId: adminId }, { receiverId: adminId }]
    }).sort({ createdAt: -1 });

    const grouped = {};
    const userIds = new Set();

    // Gom tin nh·∫Øn theo t·ª´ng userId (kh√°c admin)
    chats.forEach(chat => {
      const otherId = chat.senderId === adminId ? chat.receiverId : chat.senderId;
      userIds.add(otherId);
      if (!grouped[otherId]) grouped[otherId] = [];
      grouped[otherId].push(chat);
    });

    // Truy v·∫•n th√¥ng tin user (name + avatar)
    const users = await User.find({ _id: { $in: Array.from(userIds) } })
      .select('name imageUrl'); // Ch·ªâ l·∫•y t√™n v√† ·∫£nh

    const userMap = {};
    users.forEach(u => {
      userMap[u._id] = {
        name: u.name,
        imageUrl: u.imageUrl,
      };
    });

    // K·∫øt h·ª£p k·∫øt qu·∫£ tr·∫£ v·ªÅ
    const result = Object.entries(grouped).map(([userId, messages]) => ({
      userId,
      userInfo: userMap[userId] || { name: 'Kh√¥ng r√µ', imageUrl: '' },
      lastMessage: messages[0], // Tin nh·∫Øn g·∫ßn nh·∫•t
      messages
    }));

    res.json(result);
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y l·ªãch s·ª≠:', err);
    res.status(500).json({ error: err.message });
  }
});


module.exports = router;

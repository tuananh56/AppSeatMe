const mongoose = require('mongoose');

const bookingSchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true },                         // T√™n KH
  email: { type: String, trim: true, lowercase: true },                       // Email
  phone: { type: String, required: true, trim: true },                        // SƒêT
  soGhe: { type: Number, required: true, min: 1 },                            // S·ªë gh·∫ø
  date: { type: Date, required: true },                                       // Ng√†y ƒë·∫∑t
  time: { type: String, required: true },                                     // Gi·ªù ƒë·∫∑t (HH:mm)
  note: { type: String, trim: true },                                         // Ghi ch√∫
  chiNhanh: { type: String, trim: true },                                     // T√™n chi nh√°nh
  diaChi: { type: String, trim: true },                                       // ƒê·ªãa ch·ªâ chi nh√°nh

  tienCoc: { type: Number, default: 0, min: 0 },                              // Ti·ªÅn c·ªçc (t·ª± t√≠nh)

  trangThaiThanhToan: {
    type: String,
    enum: ['Ch∆∞a thanh to√°n', 'ƒê√£ thanh to√°n'],
    default: 'Ch∆∞a thanh to√°n',
  },

  trangThaiXacNhan: {
    type: String,
    enum: ['Ch·ªù x√°c nh·∫≠n', 'ƒê√£ x√°c nh·∫≠n', 'ƒê√£ h·ªßy'],
    default: 'Ch·ªù x√°c nh·∫≠n',
  },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  createdAt: { type: Date, default: Date.now }                                // Ng√†y t·∫°o
});

// üëâ T·ª± ƒë·ªông t·∫°o ch·ªâ m·ª•c theo ng√†y t·∫°o ƒë·ªÉ s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc
bookingSchema.index({ createdAt: -1 });

module.exports = mongoose.model('Booking', bookingSchema);
